                                     Оболочки типов.
    Для хранения основных типов дан­ных, поддерживаемых в этом языке программирования, используются
примитивные (или простые) типы вроде int или douЫe. Примитивные типы данных, в отличие от объектов,
используются для хранения простых значений из сооб­ражений производительности. Применение объектов для
хранения таких значе­ний приводит к нежелательным издержкам даже при простейших вычислениях. Поэтому
примитивные типы данных не являются частью иерархии объектов и не наследуются от класса Object.
    Иногда может понадобиться объектное представление этих типов данных. Данные примитивного типа
н е л ь з я передать методу по ссылке. Многие стандартные структуры данных, реализованные в Java, опе-
рируют объектами, а это означает, что такие структуры данных нельзя применять для хранения примитивных
типов. Для выхода из таких (и подобных им) ситуаций в Java предоставляются оболочки типов, которые пред-
ставляют собой классы, заключающие примитивный тип данных в оболочку объекта.
    К оболочкам типов относятся классы Double, Float, Long, Integer, Short, Byte, Character и Boolean,
которые предоставляют обширный ряд методов, по­зволяющих полностью интегрировать примитивные типы в иерар-
хию объектов в Java.


                                    Класс Character.
    Служит оболочкои ̆для типа char. Конструктор Character() имеет следующую общую форму:

Character(char с и м в о л)

    где параметр с и м в о л обозначает тот символ, который будет заключен в оболочку при создании объекта
типа Character. Чтобы получить значение типа char, содержащееся в объекте типа Character, достаточно выз-
вать метод charValue(), как показано ниже. Этот метод возвращает инкапсулированный символ.

char charValue()



                                     Класс Boolean.
    Служит оболочкой для логических значений типа boolean. Имеются конструкторы:

Boolean(boolean логическое_эначение)
Boolean(String логичесткая_сторока)

    В первом конструкторе логическое_значение должно быть равно true или false. А во втором конструкторе
новый объект типа Boolean будет содержать ло­гическое значение true, если логическая_строка содержит сим-
вольную строку "true" (в верхнем или нижнем регистре). В противном случае этот объект будет содержать логи-
ческое значение false.
    Получить логическое значение типа boolean из объекта типа Boolean вызвав метод метод booleanValue(). Ме-
тод возвращает значение типа boolean, эквивалентное вызывающему объекту.

boolean booleanValue ()


                                 Оболочки числовых типов.
    К ним относятся классы Byte, Short, Integer, Long, Float и Double. Все обо­лочки числовых типов наследуют
абстрактный класс NumЬer. В этом классе объявляются методы, возвращающие значение объекта в разных числовых
форматах.

byte byteValue()
double doubleValue()
float floatValue()
int intValue()
long longValue()
short shortValue()

    Метод doubleValue() возвращает значение объекта в виде типа double, метод floatValue() - значение объекта в
виде типа float и т.д.
    В классах оболочек всех числовых типов определяются конструкторы, позволяющие создавать объекты из заданного
значения или строкового представления этого значения.
    КОНСТУКТОРЫ в классе Integer.

Integer(int число)
Integer(String строка)

    Если строка не содержит числовое значение, то генерируется исключение типа NumberFormatException.
    В классах оболочек всех числовых типов переопределяется метод toString(). Он возвращает удобочитаемую форму
значения, содержащегося в оболочке, что позволяет, например, выводить значение, передавая объект оболочки типа
методу println() без дополнительного преобразования в примитивный тип.



П Р И М Е Р
    В примере программы показано, как пользоваться оболочкой числового типа для инкапсуляции числового значения
и последующего его извлечения.
    В этой программе целое значение 100 размещается в объекте iOb класса Integer. Затем это значение получается
в результате вызова метода intValue() и размещается в переменной i.

    Процесс инкапсуляции значения в объекте называется  у п а к о в к о й. Так, в следующей строке кода из рассма-
триваемой здесь программы значение 100 упаковывается в объекте типа Integer:

Integer iOb = new Integer(100);

    Процесс извлечения значения из оболочки типа называется  р а с п а к о в к о й. Например, в приведенной ниже
строке кода из рассматриваемой здесь программы целочисленное значение распаковывается из объекта iOb.

int i = iOb.intValue();























